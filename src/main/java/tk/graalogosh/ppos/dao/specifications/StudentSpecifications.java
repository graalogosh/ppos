package tk.graalogosh.ppos.dao.specifications;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.jpa.domain.Specification;
import tk.graalogosh.ppos.models.Faculty;
import tk.graalogosh.ppos.models.Status;
import tk.graalogosh.ppos.models.Student;
import tk.graalogosh.ppos.models.Student_; //generated by Hibernate Metamodel Generator

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by graal on 09.08.2015.
 */
public class StudentSpecifications {
    public static Specification<Student> IDIs(String studentID) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.studentID), studentID);
            }
        };
    }

    public static Specification<Student> nameIs(String name) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                //TODO fix search
                return cb.like(root.get(Student_.name), "%" + name + "%");
            }
        };
    }

    public static Specification<Student> entryDateIs(LocalDate entryDate) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.entryDate), entryDate);
            }
        };
    }

    public static Specification<Student> educationalGroupIs(String educationalGroup) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.educationalGroup), educationalGroup);
            }
        };
    }

    public static Specification<Student> academicStatusIs(Status academicStatus) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.academicStatus), academicStatus);
            }
        };
    }

    public static Specification<Student> financialStatusIs(Status financialStatus) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.financialStatus), financialStatus);
            }
        };
    }

    public static Specification<Student> facultyIs(Faculty faculty) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.faculty), faculty);
            }
        };
    }

    public static Specification<Student> phoneIs(String phone) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.phone), phone);
            }
        };
    }

    public static Specification<Student> bankAccountNumberIs(String bankAccountNumber) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.bankAccountNumber), bankAccountNumber);
            }
        };
    }

    public static Specification<Student> studentPaidIs(Integer studentPaid) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.studentPaid), studentPaid);
            }
        };
    }

    public static Specification<Student> studentMustPayIs(Integer studentMustPay) {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get(Student_.studentMustPay), studentMustPay);
            }
        };
    }

    public static Specification<Student> studentHaveDebt() {
        return new Specification<Student>() {
            @Override
            public Predicate toPredicate(Root<Student> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.greaterThan(root.get(Student_.studentMustPay), 0);
            }
        };
    }
}

